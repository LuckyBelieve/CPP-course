#include <bits/stdc++.h>
using namespace std;

// Function to partition the array and return the index of the pivot
int partition(int arr[], int low, int high) {
    // Choose the pivot
    int pivot = arr[high];
    // Index of smaller element and indicate
    // the right position of pivot found so far
    int i = (low - 1);

    for (int j = low; j <= high; j++) {
        // If the current element is smaller than the pivot
        if (arr[j] < pivot) {
            // Increment index of the smaller element
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return (i + 1);
}

// The Quicksort function implementation
void quickSort(int arr[], int low, int high) {
    // When low is less than high
    if (low < high) {
        // pi is the partition, return index of pivot
        int pi = partition(arr, low, high);

        // Recursion call
        // Smaller elements than the pivot go to the left
        // and higher elements go to the right
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    int arr[] = {10, 7, 8, 9, 1, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    // Function call to perform quicksortlppp
    
    quickSort(arr, 0, n - 1);

    // Print the sorted array
    cout << "Sorted Array\n";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }

    return 0;
}